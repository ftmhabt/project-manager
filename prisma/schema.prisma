generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  email         String       @unique
  firstName     String
  lastName      String
  password      String
  projects      Project[]
  TeamMember    TeamMember[]
  tasks         Task[]       @relation("TaskOwner")
  assignedTasks Task[]       @relation("AssignedTasks")
}

model Project {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String?
  due         DateTime?
  deleted     Boolean   @default(false)
  tasks       Task[]

  ownerId String?
  owner   User?   @relation(fields: [ownerId], references: [id])

  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id])

  @@unique([ownerId, name])
  @@unique([teamId, name])
  @@index([ownerId])
  @@index([teamId])
}

model Task {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  name         String
  ownerId      String
  projectId    String
  due          DateTime?
  deleted      Boolean   @default(false)
  description  String
  assignedToId String?

  owner      User        @relation("TaskOwner", fields: [ownerId], references: [id])
  assignedTo User?       @relation("AssignedTasks", fields: [assignedToId], references: [id])
  project    Project     @relation(fields: [projectId], references: [id])
  status     TASK_STATUS

  @@index([ownerId])
}

enum TASK_STATUS {
  NOT_STARTED
  STARTED
  COMPLETED
}

enum MEMBER_ROLE {
  OWNER
  MEMBER
}

model Team {
  id         String       @id @default(uuid())
  name       String
  inviteCode String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  createdBy  String
  members    TeamMember[]
  projects   Project[]
}

model TeamMember {
  id     String      @id @default(uuid())
  teamId String
  userId String
  role   MEMBER_ROLE
  team   Team        @relation(fields: [teamId], references: [id])
  user   User        @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
}
